#include <Wire.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define RESET_BTN 4
#define INPUTPIN 8
Adafruit_SSD1306 display(SCREEN_WIDTH,SCREEN_HEIGHT, &Wire, RESET_BTN);

struct Obstacle {
  const uint8_t* bitmap;
  bool active;
  int posx;
  int posy;
}obstacle1,obstacle2,obstacle3;

// 15x25px
const unsigned char playerBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x07, 0xc0, 
  0x06, 0xc0, 0x04, 0x00, 0x05, 0x60, 0x07, 0xc0, 0x04, 0x40, 0x07, 0xc0, 0x07, 0xc0, 0x05, 0x40, 
  0x04, 0x40, 0x07, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00
};

// 'my', 128x64px
const unsigned char gameOver [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xff, 0x1f, 0xfe, 0xff, 0xf7, 0xef, 0xe0, 0x3e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xfc, 0xe7, 0xfc, 0x7f, 0xe3, 0xc7, 0xdf, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xfb, 0xff, 0xfb, 0xbf, 0xdd, 0xb7, 0xbf, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xf7, 0xbd, 0xfb, 0xbf, 0xdd, 0xbb, 0xb8, 0x1e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0xf6, 0x4d, 0xf7, 0xff, 0xdd, 0xfb, 0xb8, 0x7e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xe6, 0xed, 0xf7, 0xff, 0xde, 0x7b, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xee, 0xf1, 0xfe, 0xdf, 0xfe, 0x7b, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xef, 0xff, 0xec, 0xef, 0xbe, 0x7d, 0xb8, 0x3e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xef, 0xff, 0xed, 0x6f, 0xb7, 0xcd, 0xbf, 0xbe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xee, 0xbd, 0xcd, 0x67, 0xb3, 0xcd, 0xbf, 0xbe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xee, 0xbe, 0xd9, 0xf7, 0xb3, 0xcd, 0xb8, 0x7e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xee, 0x8e, 0x9f, 0xf7, 0x61, 0xaf, 0xbf, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xe6, 0xee, 0xbf, 0xfb, 0x6d, 0xbf, 0xbf, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf6, 0x4d, 0xb0, 0x0b, 0x6c, 0x77, 0xbb, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf3, 0xbd, 0x77, 0xdb, 0x6f, 0xf6, 0xb8, 0x1e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xfb, 0xfb, 0x6f, 0xdd, 0x6f, 0xf6, 0xbf, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xfc, 0xe7, 0x2f, 0xeb, 0x1f, 0xf0, 0xdf, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0x1f, 0x9f, 0xf7, 0xbf, 0xf9, 0xe0, 0x3e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xfe, 0x07, 0xc7, 0xf8, 0x60, 0x06, 0x00, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf9, 0xf9, 0x97, 0xfb, 0x6f, 0xf6, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf3, 0xfc, 0x9a, 0xf3, 0x60, 0x56, 0xff, 0x9e, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf7, 0x06, 0xdb, 0xf6, 0x68, 0x0e, 0xc1, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf6, 0xf7, 0x5d, 0xf6, 0xed, 0xfe, 0xde, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xe6, 0xfb, 0x6d, 0xe6, 0xed, 0xfe, 0xde, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xee, 0xfb, 0x6c, 0xef, 0xe9, 0xfe, 0xde, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xec, 0xfb, 0x7e, 0xcf, 0xe8, 0x0e, 0xdc, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xef, 0xfb, 0x76, 0xdf, 0xef, 0xee, 0xdb, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xef, 0xff, 0x76, 0xdb, 0xef, 0xee, 0xff, 0xbe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xec, 0xff, 0x77, 0x5b, 0xec, 0x0e, 0xff, 0xbe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xe4, 0xfb, 0x7b, 0x33, 0xed, 0xfe, 0xc1, 0xbe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xee, 0xfb, 0x7b, 0xb7, 0xfd, 0xfe, 0xdd, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xe6, 0xfb, 0x7d, 0xf7, 0xfd, 0xfe, 0xde, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf6, 0xf7, 0x7d, 0xef, 0xff, 0xfe, 0xde, 0xdf, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xf3, 0x0e, 0xfc, 0x2f, 0xec, 0x02, 0xde, 0xde, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xfb, 0xff, 0xfe, 0xcf, 0xef, 0xf6, 0xde, 0xdf, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfb, 0xfe, 0xdf, 0xef, 0xf6, 0xde, 0xdf, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xfe, 0x07, 0xff, 0x1f, 0xe0, 0x06, 0x1e, 0x3f, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x06, 0x38, 0x07, 0x1c, 0x00, 0x08, 0x18, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc2, 0x10, 0x01, 0x04, 0x00, 0x0c, 0x00, 0x63, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x13, 0xf2, 0x41, 0xff, 0xff, 0x80, 0x27, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf2, 0x03, 0xf2, 0x49, 0xff, 0xff, 0x80, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf2, 0x47, 0xf2, 0x49, 0xff, 0xff, 0xc2, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf2, 0x7f, 0xf2, 0x41, 0xff, 0xff, 0xe6, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf2, 0x7f, 0xf2, 0x61, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf2, 0x7f, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfa, 0x7f, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};




void setup() {
  
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.display();
  delay(10); // Pause for 2 seconds
  Serial.begin(9600);
  pinMode(A1, INPUT);
  

}
bool obstacle = false;
int lposx, lposy;
int wid = 20, hig = 10;
int del = 1, score  = 0;
void loop() {
  display.clearDisplay();
  display.drawLine(34,0,34,64, WHITE);
  display.drawLine(94,0,94,64, WHITE);
  lineDrawer();
  drawPlayer(playerPose());
  drawObstacle();
  check();
  display.setTextColor(WHITE);
  display.setTextSize(1.0);
  display.setCursor(0,20); 
  display.print("score");
  display.setCursor(5,30); 
  display.print(score);
  display.display();
  delay(100);

  
  }
 void(*resetFunc) (void) = 0;
  void check(){
   if ((playerPose() >= lposx) && (playerPose() <= lposx+wid)){
    if (lposy>50){
      display.clearDisplay();
      display.drawBitmap(0, 0,  gameOver, 128, 64, WHITE);
      display.display();
      delay(1000);
      score = 0;
      resetFunc();
    }
   }
  }

 
  
  void drawObstacle(){

   if (obstacle == false){
    obstacle = true;
    lposx = randomGen();
    lposy = 0;
    display.fillRect(lposx, lposy, wid, hig, WHITE);
   }

   else {
      if (lposy<64){
        display.fillRect(lposx, nextypose(), wid, hig, WHITE);
        display.display();
        score++;
      }

        else{
          obstacle = false;
        }
   }

    
  }

 int nextypose(){
  int temp = millis()/1000;
  if ( temp >= 5)
      del = 2;
  if (temp >= 15)
      del = 4;
  if (temp >= 25)
      del = 6;
  if (temp >= 35)
      del = 8;
  if (temp >= 45)
      del = 10;
  lposy = lposy + del;
  return lposy;
 }

  

  int playerPose(){
    return map(analogRead(A1),0,1023,34,80);
  }

  void drawPlayer(int pose){
    display.drawBitmap(pose, 45,  playerBitmap, 15, 25, WHITE);
  }

  void lineDrawer(){
        if (millis()%3 == 0){
            //display.clearDisplay();
            drawLines1();
            display.display();
        }
    
        else if (millis()%3 == 1){
          //display.clearDisplay();
          drawLines2();
          display.display();
        }

        else {
          //display.clearDisplay();
          drawLines3();
          display.display();
        }
    
    }
  

  void drawLines1(){
   display.drawLine(64,0,64,10, WHITE);
   display.drawLine(64,15,64,25, WHITE);
   display.drawLine(64,30,64,40, WHITE);
   display.drawLine(64,45,64,55, WHITE);
   display.drawLine(64,60,64,64, WHITE);
   
  }

  void drawLines2(){
   display.drawLine(64,0,64,5, WHITE);
   display.drawLine(64,10,64,20, WHITE);
   display.drawLine(64,25,64,35, WHITE);
   display.drawLine(64,40,64,50, WHITE);
   display.drawLine(64,55,64,64, WHITE);
  }


  void drawLines3(){
   display.drawLine(64,0,64,8, WHITE);
   display.drawLine(64,13,64,23, WHITE);
   display.drawLine(64,28,64,38, WHITE);
   display.drawLine(64,43,64,53, WHITE);
   display.drawLine(64,58,64,64, WHITE);
  }

  int randomGen(){
    return random(34,80);
  }
  
